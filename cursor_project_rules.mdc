---
description: Apply these rules when creating the project
globs:
alwaysApply: true
---
## Project Overview

*   **Type:** Web and Mobile Platform
*   **Description:** Personal Project Directory is a web and mobile platform for users to showcase their projects in a clean, minimal, Notion-inspired gallery.
*   **Primary Goal:** Enable users to upload and showcase their projects with social integration, customization, and AI-assisted design while driving freemium monetization.

## Project Structure

### Framework-Specific Routing

*   **Directory Rules:**
    *   next@14 (App Router): `app/[route]/page.tsx` conventions
        *   `app/page.tsx` → Homepage
        *   `app/auth/login/page.tsx` → Authentication
        *   `app/projects/[id]/page.tsx` → Project details
        *   `app/[username]/page.tsx` → User directory
    *   React Native (Expo) + React Navigation:
        *   `src/screens/[ScreenName].tsx` → Screen components
        *   `src/navigation/AppNavigator.tsx` → Navigator setup

### Core Directories

*   **Versioned Structure:**
    *   `app/api`: Next.js 14 API routes with Route Handlers
    *   `src/components`: Shared React UI components
    *   `src/lib`: Utilities, Supabase client, API wrappers
    *   `src/hooks`: Custom React hooks
    *   `src/screens`: Mobile screens (React Native)
    *   `src/navigation`: React Navigation stacks and tabs

### Key Files

*   **Stack-Versioned Patterns:**
    *   `app/layout.tsx`: Next.js 14 root layout (RSC + nested layouts)
    *   `app/page.tsx`: Next.js 14 homepage
    *   `app/[username]/page.tsx`: Dynamic user directory
    *   `app/auth/login/page.tsx`: Google OAuth sign-in
    *   `app/projects/[id]/page.tsx`: Project CRUD pages
    *   `App.tsx`: React Native entry point (Expo)
    *   `src/navigation/AppNavigator.tsx`: React Navigation setup
    *   `src/screens/HomeScreen.tsx`: Mobile home screen
    *   `src/screens/ProjectScreen.tsx`: Mobile project detail

## Tech Stack Rules

*   **Version Enforcement:**
    *   next@14: App Router required, no `pages/` directory
    *   react@18: Functional components, hooks only
    *   react-native@0.72: Expo managed workflow
    *   tailwindcss@4: JIT mode, `tailwind.config.js` required
    *   shadcn/ui@latest: Component variants in TypeScript
    *   supabase-js@2: Secure client usage with RLS
    *   stripe@^12: `stripe-node` in server actions, `stripe-js` in client
    *   @sentry/nextjs@7: Error monitoring with Next.js plugin
    *   vercel@latest: `vercel.json` routing and env vars

## PRD Compliance

*   **Non-Negotiable:**
    *   "Page load time under 1 second": Use SSR/ISR and edge caching.
    *   "GDPR compliance": Data storage and consent flows.
    *   "WCAG 2.1 AA compliance": Accessible components and alt text.
    *   "99.9% uptime": Use Vercel for high availability.
    *   "Error rate less than 0.1%": Integrate Sentry with error thresholds.

## App Flow Integration

*   **Stack-Aligned Flow:**
    *   Next.js 14 Auth Flow → `app/auth/login/page.tsx` uses Supabase Google OAuth via server actions.
    *   Project CRUD Flow → `app/projects/` routes with Server Components fetching from Supabase.
    *   Premium AI Design Assistant → `app/features/design-assistant/page.tsx` calls OpenAI GPT-4 API.
    *   Free vs Paid UI → Ads injected in `app/layout.tsx` for free users via Google AdSense snippet.
    *   Mobile Auth Flow → `src/screens/LoginScreen.tsx` uses Supabase auth.
    *   Mobile Projects Flow → `src/screens/ProjectsScreen.tsx` with data from Supabase.

## Best Practices

*   Next.js 14
    *   Use `app/` directory exclusively.
    *   Prefer Server Components for data-heavy pages.
    *   Use server actions for mutations.
*   React
    *   Functional components with hooks.
    *   Use Context API or Zustand for global state.
    *   Memoize heavy computations with `useMemo`.
*   Tailwind CSS v4
    *   Enable JIT mode.
    *   Centralize design tokens in `tailwind.config.js`.
    *   Purge unused classes in production.
*   shadcn/ui
    *   Wrap variants with `cn` helper.
    *   Extend themes via CSS variables.
*   React Native (Expo)
    *   Use React Navigation.
    *   Keep screens flat in `src/screens`.
    *   Use Expo Router for file-based routing if desired.
*   Supabase
    *   Use RLS for row-level security.
    *   Leverage real-time subscriptions sparingly.
    *   Store secrets in env vars and edge functions.
*   Stripe
    *   Validate webhooks with signature check.
    *   Use Checkout Sessions for subscriptions.
*   Sentry
    *   Initialize in `sentry.client.config.ts` and `sentry.server.config.ts`.
    *   Capture session traces and performance.
*   Vercel
    *   Configure `vercel.json` for rewrites and environment.
    *   Use Vercel Analytics for performance metrics.
*   Google OAuth
    *   Restrict OAuth providers to Google only in Supabase.
*   OpenAI GPT-4
    *   Stream responses to UI for better UX.
    *   Handle rate limits gracefully.

## Rules

*   Derive folder/file patterns **directly** from `techStackDoc` versions.
*   If Next.js 14 App Router: Enforce `app/` directory with nested route folders.
*   If Pages Router: Use `pages/*.tsx` flat structure.
*   Mirror this logic for React Router, SvelteKit, etc.
*   Never mix version patterns (e.g., no `pages/` in App Router projects).

## Rules Metrics

Before starting the project development, create a metrics file in the root of the project called `cursor_metrics.md`.

### Instructions:
*   Each time a cursor rule is used as context, update `cursor_metrics.md`.
*   Use the following format for `cursor_metrics.md:`
    # Rules Metrics
    ## Usage
    The number of times rules is used as context
    *   rule-name.mdc: 5
    *   another-rule.mdc: 2
    *   ...other rules